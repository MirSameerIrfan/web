name: Build and Publish Docker Images for Self-Hosted

on:
    release:
        types: [published]

jobs:
    build-and-push:
        name: Build and Push Docker Images for Self-Hosted
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write

        steps:
            - name: Checkout Repository
              uses: actions/checkout@v4.2.2

            - name: Capture Release Version
              run: echo "RELEASE_VERSION=${{ github.event.release.tag_name }}" >> $GITHUB_ENV

            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4.1.0
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ secrets.AWS_REGION }}

            - name: Fetch Parameter Store values and create .env
              run: |
                  [ -f .env ] && rm .env

                  echo WEB_NODE_ENV=$(aws ssm get-parameter --name /prod/kodus-web/WEB_NODE_ENV --query 'Parameter.Value' --output text) >> .env

                  echo WEB_HOSTNAME_API=$(aws ssm get-parameter --name /prod/kodus-web/WEB_HOSTNAME_API --query 'Parameter.Value' --output text) >> .env

                  echo WEB_HOSTNAME_BILLING=$(aws ssm get-parameter --name /prod/kodus-web/WEB_HOSTNAME_BILLING --query 'Parameter.Value' --output text) >> .env

                  echo WEB_JWT_SECRET_KEY=$(aws ssm get-parameter --name /prod/kodus-web/WEB_JWT_SECRET_KEY --query 'Parameter.Value' --output text) >> .env
                  echo WEB_NEXTAUTH_SECRET=$(aws ssm get-parameter --name /prod/kodus-web/WEB_NEXTAUTH_SECRET --query 'Parameter.Value' --output text) >> .env
                  echo NEXTAUTH_URL=$(aws ssm get-parameter --name /prod/kodus-web/NEXTAUTH_URL --query 'Parameter.Value' --output text) >> .env

                  echo WEB_CONNECTION_SLACK=$(aws ssm get-parameter --name /prod/kodus-web/WEB_CONNECTION_SLACK --query 'Parameter.Value' --output text) >> .env

                  echo GLOBAL_JIRA_CLIENT_ID=$(aws ssm get-parameter --name /prod/kodus-web/GLOBAL_JIRA_CLIENT_ID --query 'Parameter.Value' --output text) >> .env
                  echo GLOBAL_JIRA_REDIRECT_URL=$(aws ssm get-parameter --name /prod/kodus-web/GLOBAL_JIRA_REDIRECT_URL --query 'Parameter.Value' --output text) >> .env
                  echo WEB_JIRA_SCOPES=$(aws ssm get-parameter --name /prod/kodus-web/WEB_JIRA_SCOPES --query 'Parameter.Value' --output text) >> .env

                  echo GLOBAL_GITHUB_CLIENT_ID=$(aws ssm get-parameter --name /prod/kodus-web/GLOBAL_GITHUB_CLIENT_ID --query 'Parameter.Value' --output text) >> .env
                  echo GLOBAL_GITHUB_REDIRECT_URL=$(aws ssm get-parameter --name /prod/kodus-web/GLOBAL_GITHUB_REDIRECT_URL --query 'Parameter.Value' --output text) >> .env
                  echo WEB_GITHUB_INSTALL_URL=$(aws ssm get-parameter --name /prod/kodus-web/WEB_GITHUB_INSTALL_URL --query 'Parameter.Value' --output text) >> .env
                  echo GITHUB_CLIENT_SECRET=$(aws ssm get-parameter --name /prod/kodus-web/GITHUB_CLIENT_SECRET --query 'Parameter.Value' --output text) >> .env

                  echo GLOBAL_GITLAB_CLIENT_ID=$(aws ssm get-parameter --name /prod/kodus-web/GLOBAL_GITLAB_CLIENT_ID --query 'Parameter.Value' --output text) >> .env
                  echo GLOBAL_GITLAB_REDIRECT_URL=$(aws ssm get-parameter --name /prod/kodus-web/GLOBAL_GITLAB_REDIRECT_URL --query 'Parameter.Value' --output text) >> .env
                  echo WEB_GITLAB_SCOPES=$(aws ssm get-parameter --name /prod/kodus-web/WEB_GITLAB_SCOPES --query 'Parameter.Value' --output text) >> .env
                  echo WEB_GITLAB_OAUTH_URL=$(aws ssm get-parameter --name /prod/kodus-web/WEB_GITLAB_OAUTH_URL --query 'Parameter.Value' --output text) >> .env
                  echo GLOBAL_GITLAB_CLIENT_SECRET=$(aws ssm get-parameter --name /prod/kodus-web/GLOBAL_GITLAB_CLIENT_SECRET --query 'Parameter.Value' --output text) >> .env

                  echo WEB_TERMS_AND_CONDITIONS=$(aws ssm get-parameter --name /prod/kodus-web/WEB_TERMS_AND_CONDITIONS --query 'Parameter.Value' --output text) >> .env

                  echo GLOBAL_SLACK_HOSTNAME=$(aws ssm get-parameter --name /prod/kodus-web/GLOBAL_SLACK_HOSTNAME --query 'Parameter.Value' --output text) >> .env
                  echo WEB_CONNECTION_DISCORD=$(aws ssm get-parameter --name /prod/kodus-web/WEB_CONNECTION_DISCORD --query 'Parameter.Value' --output text) >> .env
                  echo GLOBAL_DISCORD_HOSTNAME=$(aws ssm get-parameter --name /prod/kodus-web/GLOBAL_DISCORD_HOSTNAME --query 'Parameter.Value' --output text) >> .env
                  echo AZURE_REPOS_HOSTNAME=$(aws ssm get-parameter --name /prod/kodus-web/AZURE_REPOS_HOSTNAME --query 'Parameter.Value' --output text) >> .env

                  echo WEB_OAUTH_GITLAB_CLIENT_ID=$(aws ssm get-parameter --name /prod/kodus-web/WEB_OAUTH_GITLAB_CLIENT_ID --query 'Parameter.Value' --output text) >> .env
                  echo WEB_OAUTH_GITLAB_CLIENT_SECRET=$(aws ssm get-parameter --name /prod/kodus-web/WEB_OAUTH_GITLAB_CLIENT_SECRET --query 'Parameter.Value' --output text) >> .env

                  echo WEB_OAUTH_GITHUB_CLIENT_ID=$(aws ssm get-parameter --name /prod/kodus-web/WEB_OAUTH_GITHUB_CLIENT_ID --query 'Parameter.Value' --output text) >> .env
                  echo WEB_OAUTH_GITHUB_CLIENT_SECRET=$(aws ssm get-parameter --name /prod/kodus-web/WEB_OAUTH_GITHUB_CLIENT_SECRET --query 'Parameter.Value' --output text) >> .env

                  echo WEB_ANALYTICS_HOSTNAME=$(aws ssm get-parameter --name /prod/kodus-web/WEB_ANALYTICS_HOSTNAME --query 'Parameter.Value' --output text) >> .env
                  echo WEB_ANALYTICS_SECRET=$(aws ssm get-parameter --name /prod/kodus-web/WEB_ANALYTICS_SECRET --query 'Parameter.Value' --output text) >> .env

                  echo WEB_SUPPORT_DOCS_URL=$(aws ssm get-parameter --name /prod/kodus-web/WEB_SUPPORT_DOCS_URL --query 'Parameter.Value' --output text) >> .env
                  echo WEB_SUPPORT_DISCORD_INVITE_URL=$(aws ssm get-parameter --name /prod/kodus-web/WEB_SUPPORT_DISCORD_INVITE_URL --query 'Parameter.Value' --output text) >> .env
                  echo WEB_SUPPORT_TALK_TO_FOUNDER_URL=$(aws ssm get-parameter --name /prod/kodus-web/WEB_SUPPORT_TALK_TO_FOUNDER_URL --query 'Parameter.Value' --output text) >> .env

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3.10.0

            - name: Login to GitHub Container Registry
              uses: docker/login-action@v3.4.0
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract Docker Metadata
              id: meta
              uses: docker/metadata-action@v5.7.0
              with:
                  images: ghcr.io/${{ github.repository_owner }}/kodus-web
                  tags: |
                      type=semver,pattern={{version}}
                      type=raw,value=latest

            - name: Build and Push Docker Images
              uses: docker/build-push-action@v6.15.0
              with:
                  context: .
                  file: ./Dockerfiles/Dockerfile.selfhosted
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  platforms: linux/amd64,linux/arm64
                  build-args: |
                      API_CLOUD_MODE=false

            - name: Notify Discord on Success
              if: success()
              uses: sarisia/actions-status-discord@v1.15.3
              with:
                  webhook: ${{ secrets.DISCORD_WEBHOOK }}
                  content: ":tada: A imagem Docker versão `${{ env.RELEASE_VERSION }}` foi construída e enviada com sucesso para o GitHub Container Registry (Self-Hosted)."
                  title: "Build e Push: kodus-web (Self-Hosted)"
                  username: "GitHub Actions"
                  color: 0x00FF00

            - name: Notify Discord on Failure
              if: failure()
              uses: sarisia/actions-status-discord@v1.15.3
              with:
                  webhook: ${{ secrets.DISCORD_WEBHOOK }}
                  content: ":x: Falha ao construir ou enviar a imagem Docker `${{ env.RELEASE_VERSION }}` para o GitHub Container Registry (Self-Hosted). Verifique os logs para mais detalhes."
                  title: "Build e Push: kodus-web (Self-Hosted)"
                  username: "GitHub Actions"
                  color: 0xFF0000
